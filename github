#学习github的网址:http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

1.linux下git的安装
    首先,输入git,看看系统有没有安装git:
    如果没有安装,可以通过
    sudo apt-get install git 来安装git
  安装完成后，还需要最后一步设置，在命令行输入：
  $ git config --global user.name "Your Name"
  $ git config --global user.email "email@example.com"
  因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。
  注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。
2.创建版本库,先创建一个文件夹如:learngit
  cd learmgit
  通过git init命令把这个目录变成Git可以管理的仓库
  $ git init
  Initialized empty Git repository in /Users/michael/learngit/.git/
  瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。
3.远程仓库
请自行注册GitHub账号。由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：

第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：

$ ssh-keygen -t rsa -C "youremail@example.com"
你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。

如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：

4.现在是你在本地先有仓库,又想在github上创建一个仓库,并且让两个仓库同步:
    登陆github新建一个仓库,名字一致,都选择默认值(不要readme.md)
    目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。

    现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：

    $ git remote add origin git@github.com:michaelliao/learngit.git
    请千万注意，把上面的michaelliao替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。

    添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。

    下一步，就可以把本地库的所有内容推送到远程库上：

    $ git push -u origin master
    把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
    由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

    推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：
    从现在起，只要本地作了提交，就可以通过命令：

    $ git push origin master
    把本地master分支的最新修改推送至GitHub
5. 4.将的是先有本地仓库,然后创建远程仓库,本地与远程关联怎么操作的
    现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。
    首先，登陆GitHub，创建一个新的仓库，名字叫gitskills：
    我们勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件
    现在，远程库已经准备好了，下一步是用命令git clone克隆一个本地库：

    $ git clone git@github.com:michaelliao/gitskills.git
    注意把Git库的地址换成你自己的，然后进入gitskills目录看看，已经有README.md文件了
    你也许还注意到，GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。

    使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。
    要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

    Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
6.分支的创建与合并
    首先，我们创建dev分支，然后切换到dev分支：

    $ git checkout -b dev
    git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

    $ git branch dev
    $ git checkout dev
    然后，用git branch命令查看当前分支：

    $ git branch
    * dev
      master
      git branch命令会列出所有分支，当前分支前面会标一个*号。
      我们就可以在dev分支上正常提交，比如对readme.txt做个修改
      然后提交：

      $ git add readme.txt 
      $ git commit -m "branch test"
      现在，dev分支的工作完成，我们就可以切换回master分支：

      $ git checkout master
      切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：
      现在，我们把dev分支的工作成果合并到master分支上：

      $ git merge dev
      git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。

      注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。

      当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。

      合并完成后，就可以放心地删除dev分支了：

      $ git branch -d dev
7.解决冲突
    当master分支和feature1分支各自都分别有新的提交,合并分支的时候会产生冲突
    存在冲突，必须手动解决冲突后再提交。git status也可以告诉我们冲突的文件
    $ git status
    手动修改冲突的文件后,
    再提交：

    $ git add readme.txt 
    $ git commit -m "conflict fixed"
    就可以了.
    用带参数的git log也可以看到分支的合并情况：

    $ git log --graph --pretty=oneline --abbrev-commit
    最后，删除feature1分支：

    $ git branch -d feature1
8.分支管理
    通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。

    如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

    下面我们实战一下--no-ff方式的git merge：
    当我们在master和dev分支上分别修改了同一个文件,准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：

    $ git merge --no-ff -m "merge with no-ff" dev
    因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。

    合并后，我们用git log看看分支历史：

    $ git log --graph --pretty=oneline --abbrev-commit
    *   7825a50 merge with no-ff
    |\
    | * 6224937 add merge
    |/
    *   59bc1cb conflict fixed
    ...
9.bug分支
    当前正在dev上进行的工作还没有提交,现在有一个bug要马上解决
    Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：

    $ git stash
    现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug
    当bug修复完成,合并提交后
    $ git status
    工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：

    $ git stash list
    工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：

    一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

    另一种方式是用git stash pop，恢复的同时把stash内容也删了：
    再用git stash list查看，就看不到任何stash内容了：

    $ git stash list
    你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：

    $ git stash apply stash@{0}
